Homework 04 - CS112 BU - prof. Snyder

Made by: Aleksander Skjoelsvik - U54904431 // Feb 19th 2014

Part A:
	
	1.	+---------------------------+ 
		| 9 | 8 | 3 | 7 | 1 | 2 | 5 | 
		+---------------------------+
		+-----------------------+  +---+ 
		| 5 | 8 | 3 | 7 | 1 | 2 |  | 9 | 
		+-----------------------+  +---+
		+-----------+ +---+ +-------+  +---+ 
		| 2 | 1 | 3 | | 5 | | 7 | 8 |  | 9 | 
		+-----------+ +---+ +-------+  +---+
		+---+ +---+ +---+ +---+ +-------+ +---+ 
		| 1 | | 2 | | 3 | | 5 | | 7 | 8 | | 9 | 
		+---+ +---+ +---+ +---+ +-------+ +---+

	2.	If all the elements are the same, it would have to continuously switch, because it checks for 
		where an element is (larger than or equal to) and (smaller than or equal to). If all elements are 
		the same, (or equal to) would return true every time, so it would continuously switch until all 
		elements had been switched with.
		Example array: [1, 1, 1, 1, 1, 1, 1, 1, 1]

	3.	That depends on how the list is sorted. A lot of people use the number of a randomly selected 
		location in the array as their pivot. In most cases, this is the smartest because it gives the 
		best chances of getting a pivot point that requires few switches. Choosing the left-most element 
		might be best in some situations, but what are the odds of that happening..?

	4. 	+-----------------------+ 
		| 4 | 9 | 8 | 5 | 7 | 2 | 	start
		+-----------------------+ 

		+-----------------------+ 
		| 2 | 4 | 8 | 5 | 7 | 9 | 	pivot in correct position
		+-----------------------+ 
		+---+ +---+ +---------------+ 
		| 2 | | 4 | | 8 | 5 | 7 | 9 | 	splitting up at pivot
		+---+ +---+ +---------------+ 
		+---+ +---+ +---------------+ 
		| 2 | | 4 | | 7 | 5 | 8 | 9 | 	pivot in second half in correct possiont
		+---+ +---+ +---------------+ 
		+---+ +---+ +-------+ +---+ +---+ 
		| 2 | | 4 | | 7 | 5 | | 8 | | 9 | splitting up at pivot
		+---+ +---+ +-------+ +---+ +---+ 
		+---+ +---+ +-------+ +---+ +---+ 
		| 2 | | 4 | | 5 | 7 | | 8 | | 9 | arranging remaining two elements
		+---+ +---+ +-------+ +---+ +---+ 
		+-----------------------+ 
		| 2 | 4 | 5 | 7 | 8 | 9 | 	completed
		+-----------------------+ 

	5.	+-------------------------------+ 
		| 9 | 5 | 3 | 2 | 1 | 8 | 7 | 4 | 		start
		+-------------------------------+ 

		+---+ +---+ +---+ +---+ +---+ +---+ +---+ +---+ 
		| 9 | | 5 | | 3 | | 2 | | 1 | | 8 | | 7 | | 4 | 	divided
		+---+ +---+ +---+ +---+ +---+ +---+ +---+ +---+ 
		+---+---+ +---+---+ +---+---+ +---+---+ 
		| 5 | 9 | | 2 | 3 | | 1 | 8 | | 4 | 7 | 		compare 1
		+---+---+ +---+---+ +---+---+ +---+---+ 
		+---+---+---+---+ +---+---+---+---+ 
		| 2 | 3 | 5 | 9 | | 1 | 4 | 7 | 8 | 			compare 2
		+---+---+---+---+ +---+---+---+---+ 
		+---+---+---+---+---+---+---+---+ 
		| 1 | 2 | 3 | 4 | 5 | 7 | 8 | 9 | 			compare 3 - sorted
		+---+---+---+---+---+---+---+---+ 



	6.	* Solved in assignment *
	
	7.	public static int size(String s) {
		    if(s == null || s.equals("")) {
		      	return 0;
		    } else {
			return 1 + size(s.substring(1));
		    }
		}
		
	8.	public static String noVowels(String s) {
        	    if (s == null || s.equals("")) {
            		return "";
        	    }
        
        	    String removed = noVowels(s.substring(1));
        	    char first = s.charAt(0);
        
        	    if (first == 'a' || first == 'e' || first == 'i' || first == 'o' || first == 'u') {
            		return removed;
        	    } else {
            		return first + removed;
        	    }
    		}

	9.	public static String reverse(String s) {
        	    if (s == null || s.equals("")) {
            		return "";
        	    }
        
        	    return reverse(s.substring(1)) + s.charAt(0);
    		}

	10.	public static boolean isSubstring(String s1, String s2) {
        	    if(s1 == null || s1.equals("")) {
            		return true;
        	    } else if(s2== null || s2.equals("")) {
            		return false;
        	    } else if(size(s2) < size(s1)) {
            		return false;
        	    }
        
        	    String s1First = s1.substring(0,1);
        	    String s2First = s2.substring(0,1);
        
        	    if(s2First.equals(s1First)) {
            	    	return isSubstring(s1.substring(1), s2.substring(1));
        	    } else {
            	    	return isSubstring(s1, s2.substring(1));
        	    }
    		}

	11.	public static String insertInto(char c, int i, String s){
        	    return insertIntoHelper(c, i, s, 0);
    		}
    
    		public static String insertIntoHelper(char c, int i, String s, int k){
        	    if (s == null || s.equals("")){
            		return "";
        	    }
        
        	    if(k == i) {
            		return c + "" + s.charAt(0) + insertIntoHelper(c, i, s.substring(1), ++k);
        	    } else {
            		return s.charAt(0) + insertIntoHelper(c, i, s.substring(1), ++k);
        	    }
    		}

	12.	public static String replace(String a, String b, String s) {
        	    if (s == null || s.equals("")) {
            		return "";
        	    }
        
        	    if(size(s) < size(a)) {
            		return s.substring(0,1) + replace(a, b, s.substring(1));
        	    } else if(isSubstring(s.substring(0, size(a)), a)) {
            		return b + replace(a, b, s.substring(size(a)));
        	    } else {
            		return s.substring(0,1) + replace(a, b, s.substring(1));
        	    }
    		}
    