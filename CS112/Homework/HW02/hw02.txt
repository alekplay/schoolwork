Homework 02 - CS112 BU - prof. Snyder

Made by: Aleksander Skjoelsvik - U54904431 // Feb 5th 2014

Part A.A:

	1. 	a(x) = ϴx
	 	b(x) = ϴx^2
	 	c(x) = ϴlog(x)
	 	d(x) = ϴlog(x)
	 	e(x) = ϴsqrt(x)

	2. 	h(x) = ~2x^2
		i(x) = ~6x^3
		j(x) = ~(2^32)^64x
		k(x) = ~log(x)
		l(x) = ~4x^2
		m(x) = ~sqrt(4x)
		
	3.	+-----------------------+
		| 4 | 6 | 9 | 3 | 1 | 2 |	Start
		+-----------------------+


		+-----------------------+
		| 4 | 6 | 3 | 9 | 1 | 2 |	i = 3	j = 3
		+-----------------------+
		+-----------------------+
		| 4 | 3 | 6 | 9 | 1 | 2 |	i = 3	j = 2
		+-----------------------+
		+-----------------------+
		| 3 | 4 | 6 | 9 | 1 | 2 |	i = 3	j = 1
		+-----------------------+
		+-----------------------+
		| 3 | 4 | 6 | 1 | 9 | 2 |	i = 4	j = 4
		+-----------------------+
		+-----------------------+
		| 3 | 4 | 1 | 6 | 9 | 2 |	i = 4	j = 3
		+-----------------------+
		+-----------------------+
		| 3 | 1 | 4 | 6 | 9 | 2 |	i = 4	j = 2
		+-----------------------+
		+-----------------------+
		| 1 | 3 | 4 | 6 | 9 | 2 |	i = 4	j = 1
		+-----------------------+
		+-----------------------+
		| 1 | 3 | 4 | 6 | 2 | 9 |	i = 5	j = 5
		+-----------------------+
		+-----------------------+
		| 1 | 3 | 4 | 2 | 6 | 9 |	i = 5	j = 4
		+-----------------------+
		+-----------------------+
		| 1 | 3 | 2 | 4 | 6 | 9 |	i = 5	j = 3
		+-----------------------+
		+-----------------------+
		| 1 | 2 | 3 | 4 | 6 | 9 |	i = 5	j = 2
		+-----------------------+

	4.	+-----------------------+
		| 9 | 6 | 4 | 2 | 3 | 1 |	Start
		+-----------------------+

		+-----------------------+
		| 1 | 6 | 4 | 2 | 3 | 9 |	i = 0	k = 5	j = 5 / 5
		+-----------------------+
		+-----------------------+
		| 1 | 2 | 4 | 6 | 3 | 9 |	i = 1	k = 3	j = 5 / 5
		+-----------------------+
		+-----------------------+
		| 1 | 2 | 3 | 6 | 4 | 9 |	i = 2	k = 4	j = 5 / 5
		+-----------------------+
		+-----------------------+
		| 1 | 2 | 3 | 4 | 6 | 9 |	i = 3	k = 4	j = 5 / 5
		+-----------------------+
		+-----------------------+
		| 1 | 2 | 3 | 4 | 6 | 9 |	i = 4	k = 4	j = 5 / 5
		+-----------------------+

Part A.B:

	1. 	i	n	j	count()
		0	2	0	YES
		0	2	1	YES
		0	2	2	NO
		-
		1	2	0	YES
		1	2	1	YES
		1	2	2	NO
		-
		2	2		NO
		-
		
		If n = 2, count() will run 4 times.

		i	n	j	count()
		0	3	0	YES
		0	3	1	YES
		0	3	2	YES
		0	3	3	NO
		-
		1	3	0	YES
		1	3	1	YES
		1	3	2	YES
		1	3	3	NO
		-
		2	3	0	YES
		2	3	1	YES
		2	3	2	YES
		2	3	3	NO
		-
		3	3		NO
		-

		If n = 3, count() will run 9 times.

		We can thereby assume count() runs n^2 times, or ϴn^2.
		(2^2 = 4 and 3^2 = 9)

	2.	i	n	j 	count()
		0	2	0	YES
		0	2	1	YES
		0	2	2	NO
		-
		1	2	1	YES
		1	2	2	NO
		-
		2	2		NO
		-

		If n = 2, count() will run 3 times

		i	n	j 	count()
		0	3	0	YES
		0	3	1	YES
		0	3	2	YES
		0	3	3	NO
		-
		1	3	1	YES
		1	3	2	YES
		1	3	3	NO
		-
		2	3	2	YES
		2	3	3	NO
		-
		3	3		NO

		If n = 3, count() will run 6 times.
	
		i	n	j	count()
		0	4	0	YES
		0	4	1	YES
		0	4	2	YES
		0	4	3	YES
		0	4	4	NO
		-
		1	4	1	YES
		1	4	2	YES
		1	4	3	YES
		1	4	4	NO
		-
		2	4	2	YES
		2	4	3	YES
		2	4	4	NO
		-
		3	4	3	YES
		3	4	4	NO
		-
		4	4		NO
		-
		
		If n = 4, count() will run 10 times.

		We can therefore assume count() runs (1/2)n^2 + (1/2)n times, or (ϴn^2)
		(4^2)/2 + 4/2 = 10 and (3^2)/2 + 3/2 = 6)


	3.	i	n	j	k	count()
		0	2	0	0	YES
		0	2	0	1	YES
		0	2	0	2	NO
		-
		0	2	1	0	YES
		0	2	1	1	YES
		0	2	1	2	NO
		-
		0	2	2		NO
		-
		1	2	0	0	YES
		1	2	0	1	YES
		1	2	0	2	NO
		-
		1	2	1	0	YES
		1	2	1	1	YES
		1	2	1	2	NO
		-
		1	2	2		NO
		-
		2	2			NO

		If n = 2, count() will run 8 times

		i	n	j	k	count()
		0	3	0	0	YES
		0	3	0	1	YES
		0	3	0	2	YES
		0	3	0	3	NO
		-
		0	3	1	0	YES
		0	3	1	1	YES
		0	3	1	2	YES
		0	3	1	3	NO
		-
		0	3	2	0	YES
		0	3	2	1	YES
		0	3	2	2	YES
		0	3	2	3	NO
		-
		0	3	3		NO
		-
		1	3	0	0	YES
		1	3	0	1	YES
		1	3	0	2	YES
		1	3	0	3	NO
		-
		1	3	1	0	YES
		1	3	1	1	YES
		1	3	1	2	YES
		1	3	1	3	NO
		-
		1	3	2	0	YES
		1	3	2	1	YES
		1	3	2	2	YES
		1	3	2	3	NO
		-
		1	3	3		NO
		-
		2	3	0	0	YES
		2	3	0	1	YES
		2	3	0	2	YES
		2	3	0	3	NO
		-
		2	3	1	0	YES
		2	3	1	1	YES
		2	3	1	2	YES
		2	3	1	3	NO
		-
		2	3	2	0	YES
		2	3	2	1	YES
		2	3	2	2	YES
		2	3	2	3	NO
		-
		2	3	3		NO
		-
		3	3			NO

		When n = 3, count() runs 27 times

		We can therefore assume count() runs n^3 times, or ϴn^3 
		(2^3 = 8 and 3^3 = 27)


	4.	n	i	count()
		2	2	YES
		2	1	YES
		2	0	NO
		-

		When n = 2, count() runs 2 times.

		n	i	count()
		3	3	YES
		3	1	YES
		3	0	NO
		-
		
		When n = 3, count() runs 2 times.

		n	i	count()
		4	4	YES
		4	2	YES
		4	1	YES
		4	0	NO
		-

		When n = 4, count() runs 3 times.

		n	i	count()
		5	5	YES
		5	2	YES
		5	1	YES
		5	0	NO
		-

		When n = 5, count() runs 3 times.

		I cannot find the function, but prof. Snyder mentioned that when we have a loop that 
		divides itself on two each time, the function is: ϴlog(n).

	5.	The worst case scenario is ϴn^2, where n is the size of the array (items being sorted). 